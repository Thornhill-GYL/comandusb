<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.Visa</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.Visa.Internal.Disposable">
            <summary>
            A base class that correctly implements the disposable pattern using recommended best practices.
            Where possible, any object that implements <see cref="T:System.IDisposable"/> should inherit from this.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.Finalize">
            <summary>
            Object finalizer, last chance to dispose unmanaged resources.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.Dispose">
            <summary>
            Implementation of <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.CheckDisposedAndThrow">
            <summary>
            Convenience function that throws an <see cref="T:System.ObjectDisposedException"/> if the object is disposed.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.DisposeManagedResources">
            <summary>
            Override this to dispose managed resources your class owns.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.Disposable.DisposeUnmanagedResources">
            <summary>
            Override this to dispose unmanaged (i.e. not subject to garbage collection) resources your class owns.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.Internal.Disposable.IsDisposed">
            <summary>
            True if the object has already been disposed.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.DisposableHelpers">
            <summary>
            Helpful extension methods for <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Internal.DisposableHelpers.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Calls dispose on the given <see cref="T:System.IDisposable"/> if it is not null.
            </summary>
            <param name="disposable">The <see cref="T:System.IDisposable"/> to be disposed.</param>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.VisaDllEventHandler">
            <summary>
            This delegate specifies the format for event handler callbacks in the VISA library.
            </summary>
            <param name="vi"></param>
            <param name="eventType"></param>
            <param name="context"></param>
            <param name="userHandle"></param>
            <returns></returns>
        </member>
        <member name="T:NationalInstruments.Visa.Internal.VisaObjectWrapper">
            <summary>
            Provides easy access to every overload of the viGet/SetAttribute functions so that we don't have to worry
            about extraneous parameters and error checking when implementing properties or other functionality that
            requires these methods.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.GpibInterface">
            <summary>
            Provides access to the board-level GPIB functionality that is available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.Session">
            <summary>
            Serves as the base class for all VISA session objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.Int32,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeout period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>
            Then name of the key that was granted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.TimeSpan,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeout period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>
            Then name of the key that was granted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.Int32)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeout period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource(System.TimeSpan)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeout period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.LockResource">
            <summary>
            Locks the resource for this session with an exclusive lock, with an infinite timeout.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DisableEvent(Ivi.Visa.EventType)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DiscardEvents(Ivi.Visa.EventType)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.EnableEvent(Ivi.Visa.EventType)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType" />
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.UnlockResource">
            <summary>
            Unlock the resource.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.WaitOnEvent(Ivi.Visa.EventType)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <returns>
            Event identification and status information.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.DisposeManagedResources">
            <summary>
            Disposes internal managed resources and handles to the session and resource manager objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#DisableEvent(System.Int32)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.  This may be a custom event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#DiscardEvents(System.Int32)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType" />
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.  This may be a custom
            event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#EnableEvent(System.Int32)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType" />
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.  This may be a custom event type.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>
            The value of the specified attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(System.Int32,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(Ivi.Visa.NativeVisaAttribute,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeByte(System.Int32,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeByte(Ivi.Visa.NativeVisaAttribute,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt16(System.Int32,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt16(Ivi.Visa.NativeVisaAttribute,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt32(System.Int32,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt32(Ivi.Visa.NativeVisaAttribute,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt64(System.Int32,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeInt64(Ivi.Visa.NativeVisaAttribute,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeString(System.Int32,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#SetAttributeString(Ivi.Visa.NativeVisaAttribute,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), the operation will not block. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1), the operation will not timeout.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType" /> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom
            event type.</param>
            <returns>
            Event identification and status information.  Clients must dispose the returned object
            when it is no longer needed.
            </returns>
        </member>
        <member name="P:NationalInstruments.Visa.Session.EventQueueCapacity">
            <summary>
            Gets or sets the maximum number of events that can be queued at any time on the session.
            </summary>
            <value>
            Maximum number of events that can be queued at any time on the session. The default value is 50.
            </value>
            <remarks>
            Any events that occur after the queue is full are discarded. You cannot set this property if
            an event is enabled.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceName">
            <summary>
            Gets human readable text that describes the hardware interface.
            </summary>
            <value>
            Text that describes the hardware interface.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceNumber">
            <summary>
            Gets the board number for the hardware interface.
            </summary>
            <value>
            Board number for the hardware interface.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.HardwareInterfaceType">
            <summary>
            Gets the hardware interface type (GPIB, ASRL, etc.) of this session.
            </summary>
            <value>
            Hardware interface type of this session. For a list of possible values, refer to <see cref="T:Ivi.Visa.HardwareInterfaceType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceClass">
            <summary>
            Gets the resource class (INSTR, INTFC, etc.) as defined by the canonical resource name.
            </summary>
            <value>
            The resource class of this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceImplementationVersion">
            <summary>
            Gets the resource version that uniquely identifies each revision or implementation of a resource.
            </summary>
            <value>
            Implementation version of the NI-VISA driver.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceLockState">
            <summary>
            Gets the current lock state of the resource for this session.
            </summary>
            <value>
            Current lock state of the resource. For a list of possible states, refer to <see cref="T:Ivi.Visa.ResourceLockState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceManufacturerId">
            <summary>
            Gets a value that corresponds to the VXI manufacturer ID of the vendor that implemented the VISA library.
            </summary>
            <value>
            The VXI manufacturer ID of the library vendor.
            </value>
            <remarks>
            This property is unrelated to the device manufacturer properties, which specify the manufacturer ID of the device.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceManufacturerName">
            <summary>
            Gets a string that corresponds to the manufacturer name of the vendor that implemented the VISA library.
            </summary>
            <value>
            Manufacturer name of the VISA library implementer.
            </value>
            <remarks>
            This property is unrelated to the device manufacturer properties, which specify the manufacturer name of the device.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceName">
            <summary>
            Gets the VISA resource name of the currently open resource. This name is the canonical version
            of the resource name and therefore may vary from the resource descriptor used to
            open/initialize the resource.
            </summary>
            <value>
            The VISA resource name of the currently open resource.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.ResourceSpecificationVersion">
            <summary>
            Gets the resource version that uniquely identifies the VISA specification version to which the implementation is compliant.
            </summary>
            <value>
            VISA specification version to which the implementation is compliant.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.SynchronizeCallbacks">
            <summary>
            Specifies whether callbacks must be performed in a specific synchronization context.
            </summary>
            <value>
            If <see langword="true"/>, the implementation will execute callbacks in a specific synchronization context.
            If <see langword="false"/>, the implementation is allowed to execute callbacks in any context.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.TimeoutMilliseconds">
            <summary>
            The I/O timeout in milliseconds for I/O communication on this resource session.
            </summary>
            <value>
            Minimum timeout value to use when accessing the device associated with the session. If the timeout
            is <see cref="F:Ivi.Visa.VisaConstants.ImmediateTimeout"/> (0), operations will never wait for
            the device to respond. If the timeout is <see cref="F:Ivi.Visa.VisaConstants.InfiniteTimeout"/> (<entity value="ndash"/>1),
            I/O communication will not timeout. The default value is 2000 milliseconds.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.Session.Ivi#Visa#INativeVisaSession#Handle">
            <summary>
            Gets access to the NI-VISA driver session handle that NI-VISA driver operations use internally.
            </summary>
            <value>
            NI-VISA driver session handle.
            </value>
            <remarks>
            This property is provided only for extensibility. Use this property only if the desired VISA functionality
            is not a part of this API. If a future revision of this API adds the unavailable functionality, change
            statements that use this property to use the new API members.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INTFC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INTFC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibInterface"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a GPIB INTFC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.AssertTrigger">
            <summary>
            Asserts a software trigger.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.ControlAtn(Ivi.Visa.AtnMode)">
            <summary>
            Controls the state of the GPIB ATN interface line, and optionally the active controller
            state of the local interface board.
            </summary>
            <param name="command">The action to be taken with respect to the GPIB ATN line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.PassControl(System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.PassControl(System.Int16,System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
            <param name="secondaryAddress">The secondary address of the GPIB device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendCommand(System.Byte[])">
            <summary>
            Writes GPIB command bytes on the bus.
            </summary>
            <param name="data">The GPIB command bytes.</param>
            <returns>
            The number of bytes actually written.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendInterfaceClear">
            <summary>
            Pulses the interface clear line (IFC) for at least 100 microseconds.  This operation
            asserts the IFC line and the local interface becomes controller in charge (CIC).
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.GpibInterface.SendRemoteLocalCommand(Ivi.Visa.GpibInterfaceRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local
            state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the GPIB REN line.</param>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AddressState">
            <summary>
            Indicates whether the specified GPIB interface is currently addressed to talk or listen,
            or is not addressed.
            </summary>
            <value>
            Current address state of the GPIB interface. For a list of possible values, refer to <see cref="T:Ivi.Visa.GpibAddressedState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled. In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
            <value>
            <see langword="true"/> if DMA is enabled. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.AtnState">
            <summary>
            Gets the current state of the GPIB ATN (ATtentioN) interface line.
            </summary>
            <value>
            The current state of the GPIB ATN (ATtentioN) interface line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.DeviceStatusByte">
            <summary>
            Gets or sets the 488-style status byte of the local controller associated with this session.
            </summary>
            <value>
            The 488-style status byte. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.HS488CableLength">
            <summary>
            Gets or sets the total length of the GPIB cable used in the specified GPIB interface, in meters.
            If HS488 is not implemented, the value of this property is <entity value="ndash"/>1.
            </summary>
            <value>
            Meters of cable used in the GPIB interface. The initial value is the value you set in MAX.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IOProtocol">
            <summary>
            Gets or sets the protocol type for I/O communication with the physical resource.  In some cases
            you may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
            <value>
            I/O protocol for the hardware interface. For a list of possible values, refer to <see cref="T:Ivi.Visa.IOProtocol"/>.
            The default value is <see cref="F:Ivi.Visa.IOProtocol.Normal"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IsControllerInCharge">
            <summary>
            Indicates whether the specified GPIB interface is currently the controller in charge (CIC).
            </summary>
            <value>
            <see langword="true"/> if the specified GPIB interface is the controller in charge (CIC).
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.IsSystemController">
            <summary>
            Specifies whether the specified GPIB interface is currently the system controller.
            </summary>
            <value>
            <see langword="true"/> if this GPIB interface is the system controller.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.NdacState">
            <summary>
            Gets the current state of the GPIB NDAC (Not Data ACcepted) interface line.
            </summary>
            <value>
            Current state of the GPIB NDAC interface line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.PrimaryAddress">
            <summary>
            Gets or sets the primary address of the local GPIB controller used by this session.
            </summary>
            <value>
            Primary address of the local GPIB controller used by this session. The initial value is the value you set in MAX.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.RawIO">
            <summary>
            Gets a reference to the raw I/O interface for this session.
            </summary>
            <value>
            A reference to the raw I/O interface for this session. For more details, refer to <see cref="T:Ivi.Visa.IMessageBasedRawIO"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.RenState">
            <summary>
            Gets the current state of the GPIB REN (Remote ENable) interface line.
            </summary>
            <value>
            The current state of the GPIB REN interface line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SecondaryAddress">
            <summary>
            Gets or sets the secondary address of the local GPIB controller used by this session.
            </summary>
            <value>
            Secondary address of the local GPIB controller used by this session. The initial value is the value you set in MAX.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
            <value>
            <see langword="true"/> to send the END signal on the last byte of a write. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.SrqState">
            <summary>
            Gets the current state of the GPIB SRQ (Service ReQuest) interface line.
            </summary>
            <value>
            Current state of the GPIB SRQ interface line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.TerminationCharacter">
            <summary>
            Gets or sets the ASCII character used to end reading.
            </summary>
            <value>
            Termination character. The default value is 0x0A (linefeed).
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibInterface.TerminationCharacterEnabled">
            <summary>
            Specifies whether the read operation ends when a termination character is received.
            </summary>
            <value>
            If <see langword="true"/>, the read operation ends when a termination character is received.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Cleared">
            <summary>
            Occurs when the GPIB controller has been sent a device clear message.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.ControllerInCharge">
            <summary>
            Occurs when the GPIB controller has gained or lost CIC (controller in charge) status.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Listen">
            <summary>
            Occurs when the GPIB controller has been addressed to listen.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.ServiceRequest">
            <summary>
            Occurs when a service request is received from the interface.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Talk">
            <summary>
            Occurs when the GPIB controller has been addressed to talk.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="E:NationalInstruments.Visa.GpibInterface.Trigger">
            <summary>
            Occurs when a trigger interrupt is received from the interface.
            </summary>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="T:NationalInstruments.Visa.GpibSession">
            <summary>
            Provides access to the device-level GPIB functionality that is available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.MessageBasedSession">
            <summary>
            Provides access to the message-based functionality, such as reading and writing, available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.MessageBasedSession"/> object from
            the specified resource name, access modes, and timeout.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">Mode by which the specified VISA resource is accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger dependent on the interface type.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and
            output buffer (both raw and formatted I/O buffers).  It also may terminate
            pending operations on the device.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MessageBasedSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the
            488.2 status byte.
            </summary>
            <returns>
            A value that indicates which status byte bits are set.
            </returns>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.FormattedIO">
            <summary>
            Gets a reference to the formatted I/O interface for this session.
            </summary>
            <value>
            A reference to the formatted I/O interface for this session. For more details,
            refer to <see cref="T:Ivi.Visa.IMessageBasedFormattedIO"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.IOProtocol">
            <summary>
            Gets or sets the protocol type for I/O communication with the physical resource.  In some cases
            you may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
            <value>
            I/O protocol for the hardware interface. For a list of possible values, refer to <see cref="T:Ivi.Visa.IOProtocol"/>.
            The default value is <see cref="F:Ivi.Visa.IOProtocol.Normal"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.RawIO">
            <summary>
            Gets a reference to the raw I/O interface for this session.
            </summary>
            <value>
            A reference to the raw I/O interface for this session. For more details, refer to <see cref="T:Ivi.Visa.IMessageBasedRawIO"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
            <value>
            <see langword="true"/> to send the END signal on the last byte of a write. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacter">
            <summary>
            Gets or sets the ASCII character used to end reading.
            </summary>
            <value>
            Termination character. The default value is 0x0A (linefeed).
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacterEnabled">
            <summary>
            Specifies whether the read operation ends when a termination character is received.
            </summary>
            <value>
            If <see langword="true"/>, the read operation ends when a termination character is received.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.MessageBasedSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            When this event is received, client code should call ReadStatusByte.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a GPIB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.GpibSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a GPIB INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.GpibInstrumentRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local state
            of the device.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="M:NationalInstruments.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the GPIB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
            <value>
            <see langword="true"/> if DMA is enabled. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.PrimaryAddress">
            <summary>
            Gets the primary address of the GPIB device used by this session.
            </summary>
            <value>
            Primary address of the GPIB device used by this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.ReaddressingEnabled">
            <summary>
            Specifies whether to use repeat addressing before each read or write operation. In some
            cases you may not be able to change the readdressing behavior, so reading this property
            value may not return the same value that was set.
            </summary>
            <value>
            <see langword="true"/> if addressing is repeated before each read or write operation.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.RenState">
            <summary>
            Gets the current state of the GPIB REN (Remote ENable) interface line.
            </summary>
            <value>
            The current state of the GPIB REN interface line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.SecondaryAddress">
            <summary>
            Gets or sets the secondary address of the GPIB device used by this session.
            </summary>
            <value>
            Secondary address of the GPIB device used by this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.GpibSession.UnaddressingEnabled">
            <summary>
            Specifies whether to unaddress the device (UNT and UNL) after each read or write operation.
            </summary>
            <value>
            <see langword="true"/> if the device is unaddressed after each read or write operation.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.MemoryMap">
            <summary>
            Exposes memory mapped operations for register based sessions.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek8(System.Int64)">
            <summary>
            Read a byte from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The byte that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek16(System.Int64)">
            <summary>
            Read a 16-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 16-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek32(System.Int64)">
            <summary>
            Read a 32-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 32-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Peek64(System.Int64)">
            <summary>
            Read a 64-bit integer from <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>
            The 64-bit integer that was read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke8(System.Int64,System.Byte)">
            <summary>
            Write a byte value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The byte that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke16(System.Int64,System.Int16)">
            <summary>
            Write a 16-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 16-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke32(System.Int64,System.Int32)">
            <summary>
            Write a 32-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 32-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.Poke64(System.Int64,System.Int64)">
            <summary>
            Write a 64-bit integer value to <paramref name="offset" />.
            </summary>
            <param name="offset">Specifies the destination offset to which the value is written.</param>
            <param name="value">The 64-bit integer that is written.</param>
        </member>
        <member name="M:NationalInstruments.Visa.MemoryMap.DisposeUnmanagedResources">
            <summary>
            Unmaps the memory region that was mapped when this object was created.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.AddressSpace">
            <summary>
            Gets the address space that is currently mapped to this session.
            </summary>
            <value>
            The address space that is currently mapped to this session. For a list of possible values, refer to <see cref="T:Ivi.Visa.AddressSpace"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.BaseAddress">
            <summary>
            Gets the starting address of the memory <see cref="P:NationalInstruments.Visa.MemoryMap.AddressSpace"/>
            that is currently mapped to this session.
            </summary>
            <value>
            The starting address of the memory that is currently mapped to this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.Size">
            <summary>
            Gets the size of the memory <see cref="P:NationalInstruments.Visa.MemoryMap.AddressSpace"/>
            that is currently mapped to this session, starting at the
            <see cref="P:NationalInstruments.Visa.MemoryMap.BaseAddress"/>
            </summary>
            <value>
            The size of the memory that is currently mapped to this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.MemoryMap.VirtualAddress">
            <summary>
            Gets the virtual address of the memory <see cref="P:NationalInstruments.Visa.MemoryMap.AddressSpace"/>
            that is currently mapped to this session.
            </summary>
            <value>
            <see cref="F:System.IntPtr.Zero"/> if the window is only accessible through the operations provided
            on this interface.  A return value other than <see cref="F:System.IntPtr.Zero"/> if you can dereference
            the mapped address as a pointer.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.NativeVisaEventArgs">
            <summary>
            Provides access to VISA event argument objects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>
            The value of the attribute.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.NativeVisaEventArgs.DisposeManagedResources">
            <summary>
            Disposes the event context held by this class.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.NativeVisaEventArgs.EventArgs">
            <summary>
            Gets an event args reference for the native C event.  This may reference an object that
            derives from EventArgs, if the event handler for the event specified by the
            EventArg.EventType of EventArg.CustomEventType properties uses a derived class.
            </summary>
            <value>
            Then event args reference for the native C event.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.PxiBackplane">
            <summary>
            Provides access to the PXI backplane functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiBackplane"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI BACKPLANE
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">Indicates whether the trigger was already mapped.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.ReserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a single trigger line that the caller can then map and/or assert.
            </summary>
            <param name="bus">The trigger bus segment in which to reserve the trigger.</param>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.ReserveTriggers(System.Int16[],Ivi.Visa.TriggerLine[])">
            <summary>
            Reserve multiple trigger lines that the caller can then map and/or assert.  This
            method will succeed only if it can reserve all of the bus/line pairs.  If any of
            the bus/line pairs cannot be reserved, this method will not reserve any of them.
            Note that the <paramref name="buses"/> and <paramref name="lines"/> arrays are
            parallel: the lengths must be the same, and buses[n] corresponds to lines[n].
            </summary>
            <param name="buses">The trigger bus segments in which to reserve the triggers.</param>
            <param name="lines">The trigger lines to reserve.</param>
            <exception cref="T:System.ArgumentException">The array parameters must be of the same size</exception>
            <exception cref="T:Ivi.Visa.NativeVisaException"></exception>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap all destination trigger lines to which the specified source trigger line is currently
            connected.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <exception cref="T:Ivi.Visa.NativeVisaException"></exception>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiBackplane.UnreserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a single trigger line that the caller previously reserved.
            </summary>
            <param name="bus">The trigger bus segment in which to unreserve the trigger.</param>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ChassisNumber">
            <summary>
            Gets the identification number of this PXI chassis.
            </summary>
            <value>
            The identification number of this PXI chassis.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ManufacturerName">
            <summary>
            Gets the name of the hardware vendor for this PXI chassis.
            </summary>
            <value>
            The name of the hardware vendor for this PXI chassis.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiBackplane.ModelName">
            <summary>
            Gets the name of this chassis.
            </summary>
            <value>
            The name of this chassis.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.PxiMemory">
            <summary>
            Provides access to the specific PXI memory-access functionality available in VISA.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.RegisterBasedSession">
            <summary>
            Provides access to the register-based functionality, such as moving data in and out, available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.RegisterBasedSession"/> object from
            the specified resource name, access modes, and timeout.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">Mode by which the specified VISA resource is accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Map the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space" /> to be
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>
            A reference to the IMemoryMap interface, which provides the ability to
            Peek and Poke memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Write an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Write a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Write a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Write a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
            <value>
            <see langword="true"/> if DMA is enabled. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO write.
            </summary>
            <value>
            Number of elements the destination offset is incremented after every transfer.
            This value can be 0 or 1. The default value is 1.
            </value>
            <remarks>
            Because the default value of this property is 1, the destination address is incremented
            after each transfer, and the MoveOut methods write into consecutive elements. If you set
            this property to 0, the MoveOut methods always write to the same element, essentially
            treating the destination as a FIFO register.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.RegisterBasedSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <value>
            Number of elements the source offset is incremented after every transfer.
            This value can be 0 or 1. The default value is 1.
            </value>
            <remarks>
            Because the default value of this property is 1, the source address is incremented
            after each transfer, and the MoveIn methods read from consecutive elements. If you set
            this property to 0, the MoveIn methods always read from the same element, essentially
            treating the source as a FIFO register.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiMemory"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI MEMACC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryAllocate(System.Int64,System.Boolean)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <param name="require32BitRegion">The entire allocated region must be
            in the 32-bit address range.</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.PxiMemory.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="T:NationalInstruments.Visa.PxiSession">
            <summary>
            Provides access to the device-level PXI functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a PXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a PXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.PxiSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a PXI INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.ReserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:NationalInstruments.Visa.PxiSession.UnreserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ActualLinkWidth">
            <summary>
            Gets the PCI Express or PXI Express link width negotiated between the PCI Express or PXI Express host controller and the device.
            </summary>
            <value>
            PCI Express or PXI Express link width negotiated between the PCI Express or PXI Express host controller and the device.
            The value is <entity value="ndash"/>1 if the device is not a PCI Express or PXI Express device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.AllowWriteCombining">
            <summary>
            Specifies whether the implementation should attempt to combine bus write transfers
            into a larger transfer before bursting over the PCI bus.  In some cases you may not be able to
            change the write combining behavior, so reading this property value may not return the same
            value that was set.
            </summary>
            <value>
            <see langword="true"/> if the implementation should attempt to combine bus write transfers
            into a larger transfer before bursting over the PCI bus.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.BusNumber">
            <summary>
            Gets the PCI bus number of the device.
            </summary>
            <value>
            PCI bus number of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ChassisNumber">
            <summary>
            Gets the identification number of the chassis where this device is located.
            </summary>
            <value>
            The identification number of the chassis where this device is located.
            If the chassis has not been identified, this property returns <entity value="ndash"/>1.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DeviceNumber">
            <summary>
            Gets the PCI device number of the device.
            </summary>
            <value>
            PCI device number of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DstarBusNumber">
            <summary>
            Gets the differential star bus number of the device.
            </summary>
            <value>
            The differential star bus number of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.DstarLineSet">
            <summary>
            Gets the number of the set of PXI differential star lines connected to the device.
            </summary>
            <value>
            Number of the set of PXI differential star lines connected to the device.
            The value is <entity value="ndash"/>1 if the chassis is unidentified or does not have a timing slot.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.FunctionNumber">
            <summary>
            Gets the PCI function number of the device.
            </summary>
            <value>
            The PCI function number of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.IsExpress">
            <summary>
            Gets whether the device is a PXI Express device.
            </summary>
            <value>
            If <see langword="true"/>, the device is a PXI Express device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ManufacturerId">
            <summary>
            Gets the ID of the manufacturer that created the device.
            </summary>
            <value>
            The Subsystem Vendor ID of the device, if it is non-zero; otherwise, the Vendor ID
            of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ManufacturerName">
            <summary>
            Gets the name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <value>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MaxLinkWidth">
            <summary>
            Gets the maximum usable PCI Express or PXI Express link width of the device.
            </summary>
            <value>
            The maximum usable PCI Express or PXI Express link width of the device.
            The value is <entity value="ndash"/>1 if the device is not a PCI Express or PXI Express device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar0">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 0.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar1">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 1.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar2">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 2.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 2.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar3">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 3.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar4">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 4.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 4.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemBaseBar5">
            <summary>
            Gets the memory base address for Base Address Register (BAR) 5.
            </summary>
            <value>
            The memory base address for Base Address Register (BAR) 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar0">
            <summary>
            Gets the memory size for Base Address Register (BAR) 0.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar1">
            <summary>
            Gets the memory size for Base Address Register (BAR) 1.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar2">
            <summary>
            Gets the memory size for Base Address Register (BAR) 2.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 2.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar3">
            <summary>
            Gets the memory size for Base Address Register (BAR) 3.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar4">
            <summary>
            Gets the memory size for Base Address Register (BAR) 4.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 4.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemSizeBar5">
            <summary>
            Gets the memory size for Base Address Register (BAR) 5.
            </summary>
            <value>
            The memory size for Base Address Register (BAR) 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar0">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 0.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 0. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar1">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 1.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 1. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar2">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 2.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 2. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar3">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 3.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 3. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar4">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 4.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 4. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.MemTypeBar5">
            <summary>
            Gets the memory type used in Base Address Register (BAR) 5.
            </summary>
            <value>
            The memory type used in Base Address Register (BAR) 5. For a list of possible values, refer to <see cref="T:Ivi.Visa.PxiMemoryType"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ModelCode">
            <summary>
            Gets the device model code assigned by the manufacturer.
            </summary>
            <value>
            The Subsystem ID of the device, if the Subsystem Vendor ID is nonzero;
            otherwise the Device ID.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.ModelName">
            <summary>
            Gets the model name of this device (corresponds to the ModelCode property).
            </summary>
            <value>
            The model name of this device (corresponds to the ModelCode property).
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.Slot">
            <summary>
            Gets the physical slot location of this device within its chassis.
            </summary>
            <value>
            The physical slot location of this device within its chassis.
            If the location is not known, this property returns <see cref="F:Ivi.Visa.VisaConstants.UnknownSlotNumber"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLinkWidth">
            <summary>
            Gets the PCI Express or PXI Express link width of the PCI Express or PXI Express peripheral slot
            in which the device resides.
            </summary>
            <value>
            PCI Express or PXI Express link width of the PCI Express or PXI Express peripheral slot in which
            the device resides. The value is <entity value="ndash"/>1 if the device is not a PCI Express or PXI Express device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLocalBusLeft">
            <summary>
            Gets the slot number or special feature connected to local left bus lines.
            </summary>
            <value>
            The slot number or special feature connected to local left bus lines.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotLocalBusRight">
            <summary>
            Gets the slot number or special feature connected to local right bus lines.
            </summary>
            <value>
            The slot number or special feature connected to local right bus lines.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.SlotPath">
            <summary>
            Gets the slot path of the device.
            </summary>
            <value>
            The slot path of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.StarTriggerBus">
            <summary>
            Gets the PXI star trigger bus number of the device.
            </summary>
            <value>
            The PXI star trigger bus number of the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.StarTriggerLine">
            <summary>
            Gets the PXI star trigger line connected to the device.
            </summary>
            <value>
            The PXI star trigger line connected to the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.PxiSession.TriggerBus">
            <summary>
            Gets the trigger bus segment of the device.
            </summary>
            <value>
            The trigger bus segment of the device.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.PxiSession.Interrupt">
            <summary>
            Occurs when a PXI interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.ResourceManager">
            <summary>
            Provides functionality to open VISA sessions, parse resource strings, and find available resources on the system.
            </summary>
            <remarks>
            This type provides all of the functionality necessary to instantiate the correct VISA session based on the resource string.
            You can find the available resources on the system with <see cref="M:NationalInstruments.Visa.ResourceManager.Find(System.String)"/>.
            Use <see cref="M:NationalInstruments.Visa.ResourceManager.Open(System.String)"/> to instantiate the specific session object that pertains
            to your resource string.
            </remarks>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Find(System.String)"/>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Open(System.String)"/>
            <seealso cref="M:NationalInstruments.Visa.ResourceManager.Parse(System.String)"/>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.#ctor">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Visa.ResourceManager"/> object.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Find(System.String)">
            <summary>
            Find all of the VISA resources that match the specified <paramref name="pattern" />.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>
            All VISA resources matching the search <paramref name="pattern" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <param name="openStatus">The status of the open operation.</param>
            <returns>
            A reference to a session for the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.Parse(System.String)">
            <summary>
            Parse a resource string to get extended interface information.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>
            The detailed information derived by parsing the specified <paramref name="resourceName" />.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.ResourceManager.DisposeManagedResources">
            <summary>
            Disposes the handle to the resource manager object.
            </summary>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ImplementationVersion">
            <summary>
            Gets the version of this VISA.NET implementation.
            </summary>
            <value>
            The version of this VISA.NET implementation.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ManufacturerId">
            <summary>
            Gets the ID number of the vendor of this VISA.NET implementation.
            </summary>
            <value>
            The ID number of the vendor of this VISA.NET implementation.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.ManufacturerName">
            <summary>
            Gets the name of the vendor of this VISA.NET implementation.
            </summary>
            <value>
            The name of the vendor of this VISA.NET implementation.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.ResourceManager.SpecificationVersion">
            <summary>
            Gets the version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </summary>
            <value>
            The version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.ResourceTypeMismatchException">
            <summary>
            This exception is thrown when a specific resource type is being constructed with a valid resource
            of a different type and the 'checkResourceType' parameter in the constructor is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.SerialSession">
            <summary>
            Provides access to serial functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a Serial INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a Serial INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.SerialSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a Serial INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with serial interfaces.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.SerialSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for serial communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BaudRate">
            <summary>
            Gets or sets the baud rate of the interface.
            </summary>
            <value>
            The baud rate of the interface. The default value is 9600 baud.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BytesAvailable">
            <summary>
            Gets the number of bytes available in the global receive buffer.
            </summary>
            <value>
            The number of bytes available in the global receive buffer.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ClearToSendState">
            <summary>
            Gets the current state of the Clear To Send (CTS) input signal.
            </summary>
            <value>
            The current state of the CTS input signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataBits">
            <summary>
            Gets or sets the number of data bits (from 5 to 8) contained in each frame. The data bits
            for each frame are located in the low-order bits of every byte stored in memory.
            </summary>
            <value>
            The number of data bits contained in each frame. The default value is 8 bits.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataCarrierDetectState">
            <summary>
            Gets the current state of the Data Carrier Detect (DCD) input signal.
            </summary>
            <value>
            The current state of the DCD input signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataSetReadyState">
            <summary>
            Gets the current state of the Data Set Ready (DSR) input signal.
            </summary>
            <value>
            The current state of the DSR input signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DataTerminalReadyState">
            <summary>
            Gets or sets the current state of the Data Terminal Ready (DTR) output signal.
            </summary>
            <value>
            The current state of the DTR output signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            If the port is RS-485, the initial value is <see cref="F:Ivi.Visa.LineState.Unasserted"/>; otherwise, the initial value is
            <see cref="F:Ivi.Visa.LineState.Asserted"/>. However, when <see cref="P:NationalInstruments.Visa.SerialSession.FlowControl"/>
            is set to <see cref="F:Ivi.Visa.SerialFlowControlModes.DtrDsr"/>, the property is read-only and returns <see cref="F:Ivi.Visa.LineState.Unknown"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.FlowControl">
            <summary>
            Gets or sets the type of flow control the transfer mechanism uses.
            </summary>
            <value>
            Type of flow control the transfer mechanism uses. For a list of possible values, refer to <see cref="T:Ivi.Visa.SerialFlowControlModes"/>.
            The default value is <see cref="F:Ivi.Visa.SerialFlowControlModes.None"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.Parity">
            <summary>
            Gets or sets the parity used with every frame transmitted and received.
            </summary>
            <value>
            The parity used with every frame. For a list of possible values, refer to <see cref="T:Ivi.Visa.SerialParity"/>.
            The default value is <see cref="F:Ivi.Visa.SerialParity.None"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ReadTermination">
            <summary>
            Gets or sets the method that terminates read operations.
            </summary>
            <value>
            The method that terminates read operations.  For a list of possible values, refer to <see cref="T:Ivi.Visa.SerialTerminationMethod"/>.
            The default value is <see cref="F:Ivi.Visa.SerialTerminationMethod.TerminationCharacter"/>.
            </value>
            <remarks>
            The <see cref="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacterEnabled"/> property only has an effect when the
            <see cref="P:NationalInstruments.Visa.SerialSession.ReadTermination"/> property is set to a value other than
            <see cref="F:Ivi.Visa.SerialTerminationMethod.TerminationCharacter"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.ReplacementCharacter">
            <summary>
            Gets or sets the character that replaces incoming characters that arrive with errors, such as a parity error.
            </summary>
            <value>
            The replacement character. The default value is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.RequestToSendState">
            <summary>
            Gets or sets the state of the Request To Send (RTS) output signal.
            </summary>
            <value>
            The current state of the RTS output signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            The initial value is <see cref="F:Ivi.Visa.LineState.Asserted"/>. However, when <see cref="P:NationalInstruments.Visa.SerialSession.FlowControl"/>
            is set to <see cref="F:Ivi.Visa.SerialFlowControlModes.RtsCts"/>, the property is read-only and returns <see cref="F:Ivi.Visa.LineState.Unknown"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.RingIndicatorState">
            <summary>
            Gets the current state of the Ring Indicator (RI) input signal.
            </summary>
            <value>
            The current state of the RI input signal. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.StopBits">
            <summary>
            Gets or sets the number of stop bits that indicate the end of a frame.
            </summary>
            <value>
            The number of stop bits that indicate the end of a frame. For a list of possible values, refer to <see cref="T:Ivi.Visa.SerialStopBitsMode"/>.
            The default value is <see cref="F:Ivi.Visa.SerialStopBitsMode.One"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.WriteTermination">
            <summary>
            Gets or sets the method that terminates write operations.
            </summary>
            <value>
            The method that terminates write operations. For a list of possible values, refer to <see cref="T:Ivi.Visa.SerialTerminationMethod"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.XOffCharacter">
            <summary>
            Gets or sets the value of the XOFF character used for XON/XOFF flow control (both input and output).
            </summary>
            <value>
            The value of the XOFF character. The default value is <entity value="lt"/>Control-S<entity value="gt"/> (0x13).
            </value>
            <remarks>
            If the transfer mechanism is not using XON/XOFF flow control (software handshaking), the value of this property is ignored.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.XOnCharacter">
            <summary>
            Gets or sets the value of the XON character used for XON/XOFF flow control (both input and output).
            </summary>
            <value>
            The value of the XON character. The default value is <entity value="lt"/>Control-Q<entity value="gt"/> (0x11).
            </value>
            <remarks>
            If the transfer mechanism is not using XON/XOFF flow control (software handshaking), the value of this property is ignored.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.AllowTransmit">
            <summary>
            Gets or sets a value indicating whether to allow data transmission.
            </summary>
            <value>
            Suspends transmission when set to <see langword="false"/>; Resumes transmission when set to <see langword="true"/>.
            The default value is <see langword="true"/>.
            </value>
            <remarks>
            If you are not using XON/XOFF flow control (software handshaking), it is invalid to set this attribute to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BreakLength">
            <summary>
            Gets or sets the duration of the break signal asserted when <see cref="P:NationalInstruments.Visa.SerialSession.WriteTermination"/>
            is set to <see cref="F:Ivi.Visa.SerialTerminationMethod.Break"/>.
            </summary>
            <value>
            The duration in milliseconds of the break signal. Valid values include 1-500. The default value is 250 milliseconds.
            </value>
            <remarks>
            If you want to control the assertion state and length of a break signal manually, use the
            <see cref="P:NationalInstruments.Visa.SerialSession.BreakState"/> property instead.
            </remarks>
            <seealso cref="P:NationalInstruments.Visa.SerialSession.BreakState"/>
            <seealso cref="P:NationalInstruments.Visa.SerialSession.WriteTermination"/>
            <seealso cref="F:Ivi.Visa.SerialTerminationMethod.Break"/>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.BreakState">
            <summary>
            Gets or sets the state of the break line.
            </summary>
            <value>
            The state of the break line.  Refer to <see cref="T:Ivi.Visa.LineState"/> for a list of possible values.
            The default value is <see cref="F:Ivi.Visa.LineState.Unasserted"/>.
            </value>
            <remarks>
            If <see cref="T:Ivi.Visa.LineState"/> is set to <see cref="F:Ivi.Visa.LineState.Asserted"/>, <see cref="P:NationalInstruments.Visa.SerialSession.BreakState"/>
            suspends character transmission and places the transmission line in a break state until <see cref="T:Ivi.Visa.LineState"/> is reset to
            <see cref="F:Ivi.Visa.LineState.Unasserted"/>. With <see cref="P:NationalInstruments.Visa.SerialSession.BreakState"/>, you manually
            control the assertion state and length of a break signal. If you want VISA to send a break signal after each write operation automatically, use the
            <see cref="P:NationalInstruments.Visa.SerialSession.BreakLength"/> and <see cref="P:NationalInstruments.Visa.SerialSession.WriteTermination"/> properties instead.
            </remarks>
            <seealso cref="P:NationalInstruments.Visa.SerialSession.BreakLength"/>
            <seealso cref="P:NationalInstruments.Visa.SerialSession.WriteTermination"/>
            <seealso cref="T:Ivi.Visa.LineState"/>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.Connected">
            <summary>
            Indicates whether the port is properly connected to another port or device.
            </summary>
            <remarks>
            This property is valid only with serial drivers developed by National Instruments and documented to support
            this feature with the corresponding National Instruments hardware.
            </remarks>
            <value>
            <see langword="true"/> if the port is properly connected to another port or device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.DiscardNull">
            <summary>
            Gets or sets if NUL characters that are received during read operations are discarded.
            </summary>
            <value>
            <see langword="true"/> if NUL characters must be discarded. The default value is <see langword="false"/>.
            Set this to <see langword="false"/> for binary transfers.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.SerialSession.WireMode">
            <summary>
            Gets or sets the transceiver mode of the interface.
            </summary>
            <remarks>
            For RS-485 hardware, this property is valid only with the RS-485 serial driver developed by National Instruments.
            For RS-232 hardware, the values <see cref="F:NationalInstruments.Visa.WireMode.Rs232Dce"/> and <see cref="F:NationalInstruments.Visa.WireMode.Rs232Auto"/>
            are valid only with RS-232 serial drivers developed by National Instruments and documented to support this feature with the corresponding
            National Instruments hardware. When this feature is not supported, <see cref="F:NationalInstruments.Visa.WireMode.Rs232Dte"/> is the only valid value.
            </remarks>
            <value>
            The transceiver mode of the interface. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.Break">
            <summary>
            Occurs when a break signal is received.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.ClearToSend">
            <summary>
            Occurs when the Clear To Send (CTS) line changes state.
            </summary>
            <remarks>
            If the CTS line changes state quickly several times in succession, you might not receive an event notification for each change.
            </remarks>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.DataSetReady">
            <summary>
            Occurs when the Data Set Ready (DSR) line changes state.
            </summary>
            <remarks>
            If the DSR line changes state quickly several times in succession, you might not receive an event notification for each change.
            </remarks>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.DataCarrierDetect">
            <summary>
            Occurs when the Data Carrier Detect (DCD) line changed state.
            </summary>
            <remarks>
            If the DCD line changes state quickly several times in succession, you might not receive an event notification for each change.
            </remarks>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.RingIndicator">
            <summary>
            Occurs when the Ring Indicator (RI) input signal is asserted.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.AnyCharacterReceived">
            <summary>
            Occurs when at least one data byte is received.
            </summary>
            <remarks>
            If multiple data bytes arrive at once, you might receive only one event.
            After receiving this event, query the serial port for the number of bytes available
            via the <see cref="P:NationalInstruments.Visa.SerialSession.BytesAvailable"/> attribute.
            </remarks>
        </member>
        <member name="E:NationalInstruments.Visa.SerialSession.TerminationCharacterReceived">
            <summary>
            Occurs when the termination character is received.
            </summary>
            <remarks>
            The actual termination character is specified by setting
            <see cref="P:NationalInstruments.Visa.MessageBasedSession.TerminationCharacter"/> prior to enabling this event.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Visa.TcpipSession">
            <summary>
            Provides access to the specific TCP/IP functionality for accessing VXI-11 and HiSLIP instruments available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a TCPIP INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the TCPIP instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.Address">
            <summary>
            Gets the TCP/IP address of the device to which the session is connected, in
            IPv4 dot-notation or IPv6 representation.
            </summary>
            <value>
            The TCP/IP address of the device to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.DeviceName">
            <summary>
            Gets the LAN device name used by the VXI-11 or HiSLIP protocol during connection.
            </summary>
            <value>
            The LAN device name of the device to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPMaximumMessageKBytes">
            <summary>
            Gets or sets the HiSLIP maximum message size in kilobytes, where a kilobyte is 1024 bytes.
            </summary>
            <value>
            The HiSLIP maximum message size in kilobytes, where a kilobyte is 1024 bytes.
            If this session is not using the HiSLIP protocol to communicate with the device, accessing this property
            throws an exception.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPOverlapEnabled">
            <summary>
            Specifies whether the HiSLIP 'overlap' mode is enabled.
            </summary>
            <value>
            <see langword="true"/> if the HiSLIP 'overlap' mode is enabled.
            If this session is not using the HiSLIP protocol to communicate with the device, accessing this property
            throws an exception.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HiSLIPProtocolVersion">
            <summary>
            Gets the negotiated HiSLIP protocol version.
            </summary>
            <value>
            The negotiated HiSLIP protocol version.
            If this session is not using the HiSLIP protocol to communicate with the device, accessing this property
            throws an exception.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.HostName">
            <summary>
            Gets the host name of the device.
            </summary>
            <value>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.IsHiSLIP">
            <summary>
            Gets whether this session is using the HiSLIP protocol to communicate with the device.
            </summary>
            <value>
            If <see langword="true"/>, this session is using the HiSLIP protocol to communicate with the device. If
            <see langword="false"/>, the session is using VXI-11.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSession.Port">
            <summary>
            Gets the device-side port number being used for communication.
            </summary>
            <value>
            The device-side port number being used for communication.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.TcpipSocket">
            <summary>
            Provides access to the TCP/IP socket functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP SOCKET resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a TCPIP SOCKET resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.TcpipSocket"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a TCPIP SOCKET
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with the TCPIP connection.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:NationalInstruments.Visa.TcpipSocket.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.Address">
            <summary>
            Gets the TCP/IP address of the device to which the session is connected, in
            IPv4 dot-notation or IPv6 representation.
            </summary>
            <value>
            The TCP/IP address of the device to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.HostName">
            <summary>
            Gets the host name of the device.
            </summary>
            <value>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.KeepAlive">
            <summary>
            Specifies whether the TCP/IP provider enables the use of keep-alive packets on TCP connections.
            </summary>
            <value>
            If <see langword="true"/>, the TCP/IP provider enables the use of keep-alive packets on TCP connections.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.NoDelay">
            <summary>
            Specifies whether the Nagle algorithm is disabled.
            </summary>
            <value>
            If <see langword="true"/>, the Nagle algorithm is disabled. If <see langword="false"/>, the Nagle algorithm
            is enabled. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.TcpipSocket.Port">
            <summary>
            Gets the port number for the TCP/IP address of this resource.
            </summary>
            <value>
            Port number for the TCP/IP address of this resource.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.UsbPipeState">
            <summary>
            Specifies whether a USB pipe is stalled or ready.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Unknown">
            <summary>
            The state of the USB pipe is unknown.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Ready">
            <summary>
            The USB pipe is ready.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbPipeState.Stalled">
            <summary>
            The USB pipe is stalled.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbRaw">
            <summary>
            Provides access to the raw USB functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a USB RAW resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a USB RAW resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a USB RAW
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Request arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>
            The data received from the device.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbRaw.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.AlternateSetting">
            <summary>
            Gets or sets the USB alternate setting that this session uses.
            </summary>
            <value>
            USB alternate setting that this session uses. The default value is 0 in this implementation.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkInPipe">
            <summary>
            Gets or sets the endpoint number of the USB bulk-in pipe.
            </summary>
            <value>
            Endpoint number of the USB bulk-in pipe. If the resource does not have a bulk-in pipe, the initial (and only valid) value
            is <entity value="ndash"/>1. If the resource has at least 1 bulk-in pipe, the initial value is its bulk-in pipe with
            the lowest endpoint number.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkInStatus">
            <summary>
            Gets or sets a value indicating whether the USB bulk-in pipe is stalled or ready.
            </summary>
            <value>
            Value indicating whether the USB bulk-in pipe that this session uses is stalled or ready.
            The initial value for this property is determined at run time. For a list of possible values, refer to
            <see cref="T:NationalInstruments.Visa.UsbPipeState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkOutPipe">
            <summary>
            Gets or sets the endpoint number of the USB bulk-out pipe.
            </summary>
            <value>
            Endpoint number of the USB bulk-out pipe. If the resource does not have a bulk-out pipe, the initial (and only valid) value
            is <entity value="ndash"/>1. If the resource has at least 1 bulk-out pipe, the initial value is its bulk-out pipe with
            the lowest endpoint number.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.BulkOutStatus">
            <summary>
            Gets or sets a value indicating whether the USB bulk-out pipe is stalled or ready.
            </summary>
            <value>
            Value indicating whether the USB bulk-out pipe that this session uses is stalled or ready.
            The initial value for this property is determined at run time. For a list of possible values, refer to
            <see cref="T:NationalInstruments.Visa.UsbPipeState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ControlPipe">
            <summary>
            Gets or sets the endpoint number of the USB control pipe.
            </summary>
            <value>
            Endpoint number of the USB control pipe. The default value is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.InterruptInPipe">
            <summary>
            Gets or sets the endpoint number of the USB interrupt-in pipe.
            </summary>
            <value>
            Endpoint number of the USB interrupt-in pipe. If the resource does not have an interrupt-in pipe,
            the initial (and only valid) value is <entity value="ndash"/>1. If the resource has at least 1
            interrupt-in pipe, the initial value is its interrupt-in pipe with the lowest endpoint number.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.InterruptInStatus">
            <summary>
            Gets or sets a value indicating whether the USB interrupt-in pipe is stalled or ready.
            </summary>
            <value>
            Value indicating whether the USB interrupt-in pipe that this session uses is stalled or ready.
            The initial value for this property is determined at run time. For a list of possible values, refer to
            <see cref="T:NationalInstruments.Visa.UsbPipeState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ManufacturerId">
            <summary>
            Gets the USB vendor identification number of the hardware vendor for this device.
            </summary>
            <value>
            The USB vendor identification number of the hardware vendor for this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ManufacturerName">
            <summary>
            Gets the name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <value>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt-in pipe.
            </summary>
            <value>
            Maximum number of bytes that the USB device sends on an interrupt-in pipe.
            The default value is the same as the maximum packet size of the interrupt-in pipe.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ModelCode">
            <summary>
            Gets the vendor-specific model number of the device that this session uses.
            </summary>
            <value>
            The vendor-specific model number of the device that this session uses.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ModelName">
            <summary>
            Gets the model name of this device (corresponds to the ModelCode property).
            </summary>
            <value>
            The model name of this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.NumberOfPipes">
            <summary>
            Gets the number of pipes supported by the USB interface to which the session is connected.
            </summary>
            <value>
            Number of pipes supported by the USB interface to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.NumberOfUsbInterfaces">
            <summary>
            Gets the number of USB interfaces supported by the device to which the session is connected.
            </summary>
            <value>
            Number of USB interfaces supported by the device to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.ReadTermination">
            <summary>
            Gets or sets the method that terminates read operations.
            </summary>
            <value>
            Gets or sets the method that terminates read operations. For a list of possible values, refer to
            <see cref="T:NationalInstruments.Visa.UsbTerminationMethod"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbClass">
            <summary>
            Gets the USB class of the device that this session uses.
            </summary>
            <value>
            The USB class of the device that this session uses.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbInterfaceNumber">
            <summary>
            Gets the USB interface number of the interface to which the session is connected.
            </summary>
            <value>
            USB interface number of the interface to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbProtocol">
            <summary>
            Gets the USB protocol number.
            </summary>
            <value>
            The USB protocol number.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbSerialNumber">
            <summary>
            Gets the serial number of the device that this session uses.
            </summary>
            <value>
            The serial number of the device that this session uses.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbRaw.UsbSubclass">
            <summary>
            Gets the USB subclass of the device that this session uses.
            </summary>
            <value>
            The USB subclass of the device that this session uses.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.UsbRaw.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbSession">
            <summary>
            Provides access to the specific device-level USB functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a USB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a USB INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.UsbSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a USB INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Request arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>
            The data received from the device.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType" />.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType" />.</param>
        </member>
        <member name="M:NationalInstruments.Visa.UsbSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the USB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.Is4882Compliant">
            <summary>
            Gets if the device associated with this session is IEEE 488.2 compliant.
            </summary>
            <value>
            <see langword="true"/> if the device associated with this session is IEEE 488.2 compliant.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ManufacturerId">
            <summary>
            Gets the USB vendor identification number of the hardware vendor for this device.
            </summary>
            <value>
            The USB vendor identification number of the hardware vendor for this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ManufacturerName">
            <summary>
            Gets the name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <value>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt-in pipe.
            </summary>
            <value>
            Maximum number of bytes that the USB device sends on an interrupt-in pipe.
            The default value is the same as the maximum packet size of the interrupt-in pipe.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ModelCode">
            <summary>
            Gets the vendor-specific model number of the device that this session uses.
            </summary>
            <value>
            The vendor-specific model number of the device that this session uses.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.ModelName">
            <summary>
            Gets the model name of this device (corresponds to the ModelCode property).
            </summary>
            <value>
            The model name of this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbInterfaceNumber">
            <summary>
            Gets the USB interface number of the interface to which the session is connected.
            </summary>
            <value>
            USB interface number of the interface to which the session is connected.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbProtocol">
            <summary>
            Gets the USB protocol number.
            </summary>
            <value>
            The USB protocol number.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.UsbSession.UsbSerialNumber">
            <summary>
            Gets the serial number of the device that this session uses.
            </summary>
            <value>
            The serial number of the device that this session uses.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.UsbSession.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.UsbTerminationMethod">
            <summary>
            Specifies the available methods to terminate a read operation on the <see cref="T:NationalInstruments.Visa.UsbRaw"/> object.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.None">
            <summary>
            The read operation ignores short packets. Reads do not terminate until
            all of the requested data is received, or an error occurs.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.Short">
            <summary>
            The read operation terminates on a short packet. Use this setting if the device terminates
            all read transfers with a short packet, including sending a zero (short) packet
            when the last data packet is full.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.UsbTerminationMethod.ShortOrCount">
            <summary>
            The read operation terminates on a short packet or when it receives the requested
            count of data bytes. Use this setting if the device does not send zero packets.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.VxiBackplane">
            <summary>
            Provides access to the VXI backplane functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI BACKPLANE resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiBackplane"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI BACKPLANE
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertInterrupt(System.Int16,System.Int32)">
            <summary>
            Assert the specified device interrupt or signal.
            </summary>
            <param name="irqLevel">The specified device interrupt or signal.</param>
            <param name="statusId">The status value to be presented during an interrupt
            acknowledge cycle.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="line">The trigger to assert.</param>
            <param name="protocol">The VXI trigger protocol to use when asserting the trigger.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.AssertUtilitySignal(Ivi.Visa.VxiUtilitySignal)">
            <summary>
            Assert the specified utility bus signal.
            </summary>
            <param name="signal">The utility bus signal to assert.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">If true, the trigger has already been mapped.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.UnmapTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiBackplane.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.ChassisLogicalAddress">
            <summary>
            Gets the logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe.
            </summary>
            <value>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe. If the value is unknown, the value is <see cref="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.InterruptStatus">
            <summary>
            Gets the current state of the VXI/VME interrupt lines.
            </summary>
            <value>
            Bitfield with bits 0-6 corresponding to interrupt lines 1-7.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.SystemFailureStatus">
            <summary>
            Gets the current state of the VXI/VME SYSFAIL (system failure) backplane line.
            </summary>
            <value>
            Current state of the SYSFAIL backplane line. For a list of possible values, refer to <see cref="T:Ivi.Visa.LineState"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.TriggerLine">
            <summary>
            Gets or sets the identifier for the current triggering mechanism.
            </summary>
            <value>
            Identifier for the current triggering mechanism. For a list of possible values, refer to <see cref="T:Ivi.Visa.TriggerLine"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.TriggerStatus">
            <summary>
            Gets the current state of the VXI trigger lines.
            </summary>
            <value>
            Current state of the VXI trigger lines. This value is a bitfield that uses <see cref="T:Ivi.Visa.TriggerLines"/>
            to show the state of the trigger lines.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiBackplane.TriggerSupport">
            <summary>
            Gets the VXI trigger lines that the NI-VISA driver supports.
            </summary>
            <value>
            <see cref="T:Ivi.Visa.TriggerLines"/> bitfield that indicates which trigger lines the NI-VISA driver supports.
            </value>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.SystemFailure">
            <summary>
            Occurs when the VXI backplane experiences a system failure.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.SystemReset">
            <summary>
            Occurs when the VXI backplane has initiated a system reset.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiBackplane.Trigger">
            <summary>
            Occurs when a trigger is received from the VXI backplane.
            </summary>
        </member>
        <member name="T:NationalInstruments.Visa.VxiMemory">
            <summary>
            Provides access to the specific VXI memory-access functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI MEMACC resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiMemory"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI MEMACC
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiMemory.Move(Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,System.Int64)">
            <summary>
            Moves data from the specified source to the specified destination.
            </summary>
            <param name="sourceSpace">The address space of the source.</param>
            <param name="sourceOffset">The offset (in bytes) of the memory
            <paramref name="sourceSpace" /> from which data is moved.</param>
            <param name="sourceWidth">The data width of the source.</param>
            <param name="destinationSpace">The address space of the destination.</param>
            <param name="destinationOffset">The offset (in bytes) of the memory
            <paramref name="destinationSpace" /> to which data is moved.</param>
            <param name="destinationWidth">The data width of the destination.</param>
            <param name="sourceCount">The number of elements to move, where the data width of the
            elements to move is identical to the source data width.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiMemory.LogicalAddress">
            <summary>
            Gets the logical address of the VXI or VME controller for this interface.
            </summary>
            <value>
            The logical address of the VXI or VME controller for this interface.
            </value>
        </member>
        <member name="T:NationalInstruments.Visa.VxiSession">
            <summary>
            Provides access to the specific device-level VXI functionality available in VISA.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <remarks>
            This constructor ensures that the resource string represents a VXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name, access modes, and initialization timeout value.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <remarks>
            This constructor ensures that the resource string represents a VXI INSTR resource and throws a
            <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource string represents
            an incorrect resource.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Visa.VxiSession"/> object from
            the specified resource name, access modes, initialization timeout value, and resource name validation flag.
            </summary>
            <param name="resourceName">String that describes a unique VISA resource.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="openTimeout">
            The maximum time in milliseconds that this method waits to open a VISA session with the specified
            resource. This parameter does not set the <see cref="P:NationalInstruments.Visa.Session.TimeoutMilliseconds"/>
            property of the initialized instance.
            </param>
            <param name="checkResourceType">
            If set to <see langword="true"/>, the constructor ensures that the resource string represents a VXI INSTR
            resource and throws a <see cref="T:NationalInstruments.Visa.ResourceTypeMismatchException"/> if the resource
            string represents an incorrect resource. If set to <see langword="false"/>, the resource string can be any
            valid VISA resource.
            </param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.AssertTrigger(Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="protocol">The trigger protocol to use when the trigger is asserted.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.CommandQuery(Ivi.Visa.VxiCommandMode,System.Int32)">
            <summary>
            Send the device a miscellaneous command or query and/or retrieves the response to a
            previous query.
            </summary>
            <param name="mode">Indicates whether to issue a command and/or retrieve a response.</param>
            <param name="command">The command to send.</param>
            <returns>
            The response retrieved from the device.  If the mode does not include a response, this method
            returns zero.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes</param>
            <returns>
            The offset of the allocated device memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger dependent on the interface type.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and
            output buffer (both raw and formatted I/O buffers).  It also may terminate
            pending operations on the device.
            </summary>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the
            488.2 status byte.
            </summary>
            <returns>
            A value that indicates which status byte bits are set.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Map the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space" /> to be
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>
            A reference to the IMemoryMap interface, which provides the ability to
            Peek and Poke memory.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Write an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Write a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Write a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Write a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer" /> to which data is moved.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>
            The data read from the bus.
            </returns>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex" /> and moving <paramref name="count" /> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer" /> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:NationalInstruments.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer" /> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ChassisLogicalAddress">
            <summary>
            Gets the logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe.
            </summary>
            <value>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe. If the value is unknown, the value is <see cref="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.CommanderLogicalAddress">
            <summary>
            Gets the unique logical address of the commander of the VXI device used by the given session.
            </summary>
            <value>
            The logical address of the commander of the VXI device used by the given session.
            If the value is unknown, the value is <see cref="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationAccessPrivilege">
            <summary>
            Gets or sets the address modifier to use in high-level access operations, such as
            <see cref="M:NationalInstruments.Visa.VxiSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)"/> or
            <see cref="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])"/>, when writing to the destination.
            </summary>
            <value>
            Address modifier to use when writing to the destination.
            For a list of possible values, refer to <see cref="T:Ivi.Visa.VxiAccessPrivilege"/>.
            The default value is <see cref="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationByteOrder">
            <summary>
            Gets or sets the byte order to use in high-level access operations, such as
            <see cref="M:NationalInstruments.Visa.VxiSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)"/> or
            <see cref="M:NationalInstruments.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])"/>, when writing to the destination.
            </summary>
            <value>
            Byte order to use when writing to the destination.
            For a list of possible values, refer to <see cref="T:Ivi.Visa.ByteOrder"/>.
            The default value is <see cref="F:Ivi.Visa.ByteOrder.BigEndian"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DeviceClass">
            <summary>
            Gets the VXI-defined device class to which the resource belongs.
            </summary>
            <value>
            Device class to which the resource belongs. For a list of possible values, refer to <see cref="T:Ivi.Visa.VxiDeviceClass"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelNumber">
            <summary>
            Gets or sets the Fast Data Channel (FDC) that is used to transfer the buffer.
            </summary>
            <value>
            Fast Data Channel used to transfer the buffer. The default value is 0 in this implementation.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelUsePair">
            <summary>
            Specifies whether to use a channel pair for transferring data.
            </summary>
            <value>
            <see langword="true"/> if a channel pair is used for transferring data;
            <see langword="false"/> if only one channel is used for transferring data.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FastDataChannelUseStreaming">
            <summary>
            Specifies whether to use FDC streaming mode when transferring data.
            </summary>
            <value>
            <see langword="true"/> FDC streaming mode will be used when transferring data;
            <see langword="false"/> normal mode will be used when transferring data.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.Is4882Compliant">
            <summary>
            Gets if the device associated with this session is IEEE 488.2 compliant.
            </summary>
            <value>
            <see langword="true"/> if the device associated with this session is IEEE 488.2 compliant.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.IsImmediateServant">
            <summary>
            Gets if the device associated with this session is an immediate servant of the controller running VISA.
            </summary>
            <value>
            <see langword="true"/> if the device associated with this session is an immediate servant of the controller running VISA.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.LogicalAddress">
            <summary>
            Gets the logical address of the VXI or VME device used by this session.
            </summary>
            <value>
            Logical address of the device used by this session.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ManufacturerId">
            <summary>
            Gets the VXIbus vendor identification number of the hardware vendor for this device.
            </summary>
            <value>
            The VXIbus vendor identification number of the hardware vendor for this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ManufacturerName">
            <summary>
            Gets the name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <value>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryBase">
            <summary>
            Gets the base address of the device in VXIbus memory address space.
            </summary>
            <value>
            The base address of the device in VXIbus memory address space.
            </value>
            <remarks>
            This base address is applicable to A24 or A32 address space. If the value of
            <see cref="P:NationalInstruments.Visa.VxiSession.MemorySpace"/> is VxiA16,
            the value of this property is insignificant for the specified VXI device.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryMapAccessPrivilege">
            <summary>
            Specifies the address modifier to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window.
            </summary>
            <value>
            The address modifier to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window. For a list of possible values, refer to <see cref="T:Ivi.Visa.VxiAccessPrivilege"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemoryMapByteOrder">
            <summary>
            Specifies the byte order to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window.
            </summary>
            <value>
            The byte order to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window. For a list of possible values, refer to <see cref="T:Ivi.Visa.ByteOrder"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemorySize">
            <summary>
            Gets the size of the memory requested by the device in the VXIbus address space.
            </summary>
            <value>
            The size of the memory requested by the device in the VXIbus address space.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.MemorySpace">
            <summary>
            Gets the VXIbus address space used by the device.
            </summary>
            <value>
            The VXIbus address space used by the device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ModelCode">
            <summary>
            Gets the vendor-specific model number for this VXIbus device.
            </summary>
            <value>
            The vendor-specific model number for this VXIbus device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.ModelName">
            <summary>
            Gets the model name of this device (corresponds to the ModelCode property).
            </summary>
            <value>
            The model name of this device.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.Slot">
            <summary>
            Gets the physical slot location of this VXIbus device.
            </summary>
            <value>
            Physical slot location of the device.
            The value is <see cref="F:Ivi.Visa.VisaConstants.UnknownSlotNumber"/> if the slot number is unknown.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceAccessPrivilege">
            <summary>
            Gets or sets the address modifier to use in high-level access operations, such as
            <see cref="M:NationalInstruments.Visa.VxiSession.In32(Ivi.Visa.AddressSpace,System.Int64)"/> or
            <see cref="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)"/>, when reading from the source.
            </summary>
            <value>
            Address modifier to use when reading from the source.
            For a list of possible values, refer to <see cref="T:Ivi.Visa.VxiAccessPrivilege"/>.
            The default value is <see cref="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceByteOrder">
            <summary>
            Gets or sets the byte order to use in high-level access operations, such as
            <see cref="M:NationalInstruments.Visa.VxiSession.In32(Ivi.Visa.AddressSpace,System.Int64)"/> or
            <see cref="M:NationalInstruments.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)"/>, when reading from the source.
            </summary>
            <value>
            Byte order to use when reading from the source.
            For a list of possible values, refer to <see cref="T:Ivi.Visa.ByteOrder"/>.
            The default value is <see cref="F:Ivi.Visa.ByteOrder.BigEndian"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TriggerLine">
            <summary>
            Gets or sets the identifier for the current triggering mechanism.
            </summary>
            <value>
            Identifier for the current triggering mechanism. For a list of possible values, refer to <see cref="T:Ivi.Visa.TriggerLine"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TriggerSupport">
            <summary>
            Gets the VXI trigger lines that this VISA implementation supports.
            </summary>
            <value>
            <see cref="T:Ivi.Visa.TriggerLines"/> bitfield indicating which trigger lines this VISA implementation supports.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.FormattedIO">
            <summary>
            Gets a reference to the formatted I/O interface for this session.
            </summary>
            <value>
            A reference to the formatted I/O interface for this session. For more details,
            refer to <see cref="T:Ivi.Visa.IMessageBasedFormattedIO"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.IOProtocol">
            <summary>
            Gets or sets the protocol type for I/O communication with the physical resource.  In some cases
            you may not be able to change the protocol, so reading this property value may not return
            the same value that was set.
            </summary>
            <value>
            I/O protocol for the hardware interface. For a list of possible values, refer to <see cref="T:Ivi.Visa.IOProtocol"/>.
            The default value is <see cref="F:Ivi.Visa.IOProtocol.Normal"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.RawIO">
            <summary>
            Gets a reference to the raw I/O interface for this session.
            </summary>
            <value>
            A reference to the raw I/O interface for this session. For more details, refer to <see cref="T:Ivi.Visa.IMessageBasedRawIO"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
            <value>
            <see langword="true"/> to send the END signal on the last byte of a write. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TerminationCharacter">
            <summary>
            Gets or sets the ASCII character used to end reading.
            </summary>
            <value>
            Termination character. The default value is 0x0A (linefeed).
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.TerminationCharacterEnabled">
            <summary>
            Specifies whether the read operation ends when a termination character is received.
            </summary>
            <value>
            If <see langword="true"/>, the read operation ends when a termination character is received.
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to
            change whether DMA is enabled, so reading this property value may not return the same
            value that was set.
            </summary>
            <value>
            <see langword="true"/> if DMA is enabled. The initial value for this property is determined at run time.
            </value>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO write.
            </summary>
            <value>
            Number of elements the destination offset is incremented after every transfer.
            This value can be 0 or 1. The default value is 1.
            </value>
            <remarks>
            Because the default value of this property is 1, the destination address is incremented
            after each transfer, and the MoveOut methods write into consecutive elements. If you set
            this property to 0, the MoveOut methods always write to the same element, essentially
            treating the destination as a FIFO register.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Visa.VxiSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <value>
            Number of elements the source offset is incremented after every transfer.
            This value can be 0 or 1. The default value is 1.
            </value>
            <remarks>
            Because the default value of this property is 1, the source address is incremented
            after each transfer, and the MoveIn methods read from consecutive elements. If you set
            this property to 0, the MoveIn methods always read from the same element, essentially
            treating the source as a FIFO register.
            </remarks>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.Interrupt">
            <summary>
            Occurs when a VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.SignalProcessor">
            <summary>
            Occurs when a VXIbus signal or VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.Trigger">
            <summary>
            Occurs when a VXIbus trigger is received from the device.
            </summary>
        </member>
        <member name="E:NationalInstruments.Visa.VxiSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            When this event is received, client code should call ReadStatusByte.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Visa.WireMode">
            <summary>
            Defines the wire mode that you can use with <see cref="P:NationalInstruments.Visa.SerialSession.WireMode"/>.
            </summary>
            <seealso cref="P:NationalInstruments.Visa.SerialSession.WireMode"/>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs485Wire4">
            <summary>
            Wire uses the RS-485 4-wire mode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs485Wire2DtrEcho">
            <summary>
            Wire uses the RS-485 2-wire DTR mode controlled with echo.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs485Wire2DtrControl">
            <summary>
            Wire uses the RS-485 2-wire DTR mode controlled without echo.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs485Wire2Auto">
            <summary>
            Wire uses the RS-485 2-wire auto mode controlled with TXRDY.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs232Dte">
            <summary>
            Wire uses the RS-232 DTE mode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs232Dce">
            <summary>
            Wire uses the RS-232 DCE mode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Rs232Auto">
            <summary>
            Automatically selects the RS-232 wire mode to use.
            </summary>
        </member>
        <member name="F:NationalInstruments.Visa.WireMode.Unknown">
            <summary>
            Wire uses an unknown mode.
            </summary>
        </member>
    </members>
</doc>
